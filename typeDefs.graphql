type User {
  _id: ID
  username: String!
  email: String!
  password: String!
  avatar: String
  joinDate: String
}

type Board {
  _id: ID
  boardname: String!
  owner: User!
  contributors: [User]
  description: String
  createdDate: String
  color: String
  coverImg: String
  columns: [Column]
}

type Order {
  _id: ID!
  order: Int!
}

type Column {
  _id: ID
  title: String!
  position: Int!
  boardId: ID!
  author: User
  cards: [Card]
  createdDate: String
}

type Card {
  _id: ID
  title: String!
  board: Board!
  author: User!
  column: Column!
  createdDate: String
}

type Token {
  token: String!
}

input BoardInput {
  boardname: String!
  owner: ID!
  description: String
  coverImg: String
  color: String
}

input UserInput {
  username: String!
  email: String!
  password: String!
}

input ColumnInput {
  _id: ID
  title: String!
  boardId: ID!
  position: Int!
  createdDate: String
}

type Mutation {
  signupUser(userInput: UserInput): Token
  signinUser(email: String!, password: String!): Token
  createBoard(boardInput: BoardInput): Board
  deleteBoard(boardId: ID): String
  updateBoard(boardInput: BoardInput!, boardId: ID!): Board
  upsertColumn(columnInput: ColumnInput!): Column
  normalizeColumnOrder(columnIds: [ID]!): Boolean
  deleteColumn(columnId: ID!): ID
}

type Query {
  getCurrentUser: User
  isUsernameAvalaible(username: String!): Boolean
  getMyBoards: [Board]
  getBoardById(boardId: ID!): Board
}
